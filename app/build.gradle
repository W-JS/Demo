plugins {
    id 'com.android.application'
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "com.wjs.demo"
        minSdkVersion 28
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"
        //版本名后面添加一句话，意思就是flavor dimension 它的维度就是该版本号，这样维度就是都是统一的了
        flavorDimensions "versionCode"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    productFlavors {
        // app1
        WallpaperTheme {
            // 设置applicationId（这里很重要，两个不同applicationId的apk，同时安装在同一台Android手机中）
            applicationId "com.wjs.demo"
            // 定义app_icon字段，在AndroidManifest.xml文件中用到
            manifestPlaceholders = [app_icon: "@mipmap/ic_launcher"]
        }
        // app2
        WallpaperThemeTest {
            applicationId "com.xp.demo"
            manifestPlaceholders = [app_icon: "@mipmap/ic_launcher"]
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    android.applicationVariants.all {
        variant ->
            variant.outputs.all {
                // 这里修改apk文件名
                outputFileName = "${productFlavors[0].name}_v${defaultConfig.versionName}_${buildType.name}.apk"
//                outputFileName = "${productFlavors[0].name}_v${defaultConfig.versionName}_${buildType.name}_${releaseTime()}.apk" // 带日期
            }
    }
}

static def releaseTime() {
    return new Date().format("yyyyMMddHHmmss", TimeZone.getTimeZone("GMT+08:00"))
}

dependencies {

    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.2.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.1'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    implementation 'com.hyman:flowlayout-lib:1.1.2'
    implementation 'com.nostra13.universalimageloader:universal-image-loader:1.9.5'
    api 'com.github.bumptech.glide:glide:4.11.0'
    api 'jp.wasabeef:glide-transformations:2.0.1'

    // 基于 JVM 的语言的注解（一组可在基于 JVM 的语言中使用的 Java 注释。它们用作附加文档，可由 IDE 和静态分析工具解释以改进代码分析。）
    compileOnly 'org.jetbrains:annotations:23.0.0'

    // RxJava：JVM 的响应式扩展（RxJava 是Reactive Extensions的 Java VM 实现：一个使用可观察序列组成异步和基于事件的程序的库。
    // 它扩展了观察者模式以支持数据/事件序列，并添加了允许您以声明方式将序列组合在一起的运算符，同时抽象出对低级线程、同步、线程安全和并发数据结构等事物的关注。）
    implementation "io.reactivex.rxjava3:rxjava:3.1.3"
    // RxAndroid：Android 的响应式扩展（RxJava 3的 Android 特定绑定。
    // 该模块向 RxJava 添加了最少的类，使在 Android 应用程序中编写反应式组件变得轻松无忧。更具体地说，它提供了Scheduler在主线程或任何给定的Looper.）
    implementation 'io.reactivex.rxjava3:rxandroid:3.0.0'

    // fastjson（Fastjson 是一个 Java 库，可用于将 Java 对象转换为其 JSON 表示形式。它还可用于将 JSON 字符串转换为等效的 Java 对象。
    // Fastjson 可以处理任意 Java 对象，包括您没有源代码的预先存在的对象。）
    implementation 'com.alibaba:fastjson:1.1.72.android'

    // gson是一种组件库，可以把java对象数据转换成json数据格式。
    implementation 'com.google.code.gson:gson:2.9.0'

    // FileDownloader（简单易用、灵活、自动断点续传、单任务多线程/多连接/分块下载、高并发、可选择性支持: 独立/非独立进程）
    implementation 'com.liulishuo.filedownloader:library:1.7.7'
}